block content
  #nounsPieChart

  script.

    (function (io) {
    
      var socket = io.connect();


    /**
     * Instantiates a model-DOM event domain.
     * As found in jquery_custom.js
     */

    var signalModel = new $.eventModel();

    /**
     * Listens for model instance creation and binds  events
     * to the DOM with respect to their model and structure.
     * @param  {Object} info    Event information from emit
     * @param  {Object} item    The thing that happened.
     * @return null
     */

    signalModel.on('created', function(info,item) {

      if(item.data.noun="geolocation"){
        var chart = $('#geolocationChart').highcharts();
        if(chart.series.length === 0)
          chart.addSeries({})
        chart.series[0].addPoint( [ (new Date(item.data.date)).getTime() , item.data.results+1 ], true, false );
      }


      if(item.data.noun="image"){
        var chart = $('#imageChart').highcharts();
        if(chart.series.length === 0)
          chart.addSeries({})
        chart.series[0].addPoint( [ (new Date(item.data.date)).getTime() , item.data.results+1 ], true, false );
      }

    });


    signalModel.on('nouns', function(info,item) {

      var chart = $('#nounsChart').highcharts();
      if(chart.series.length === 0)
        chart.addSeries({})
        chart.series[0].addPoint( [ item.data.noun, item.data.results ], true, false );

      var chart = $('#nounsPieChart').highcharts();
      if(chart.series.length === 0)
        chart.addSeries({})
        chart.series[0].addPoint( [ item.data.noun, item.data.results ], true, false );

    });


    //- signalModel.on('names', function(info,names) {

    //-   var chart = $('#namesChart').highcharts();
    //-   if(chart.series.length === 0)
    //-     chart.addSeries({})
    //-   $.map(names, function(val, name){
    //-     chart.series[0].addPoint( [ name, val ], true, false );
    //-   })

    //- });



    /**
     * Listens for model updates and binds model events
     * to the DOM with respect to their model and structure.
     * @param  {Object} info     Event information from emit
     * @param  {Object} activity The thing that happened.
     * @return null
     */
    
    //- signalModel.on('updated', function(info,item) {
    //-   $.map(item.data, function(val, attr){
    //-     if($("#"+item.id+" #"+attr).text())
    //-       $("#"+item.id+" #"+attr).text(val)
    //-     else $("#"+item.id).append($("<div>",{id:attr,text:val}))
    //-   })
    //- });

    /**
     * Glues the model events to their respective DOM
     * elements and gets a specified number of items
     * with which to first populate the content.
     * @param  {String} model The name of the model
     * @return null
     */
    
    function dataset_glue(model){

      /**
       * Listens for model changes over socket.
       * @param  {String} model   Model name
       * @return null
       */
    
      socket.on( model, function(dataset){
          signalModel.emit(dataset.verb, dataset);
      })

      /**
       * Gets some amount of the signals from the model
       * for display now, and bsubscribe to them.
       * Intended to be customized, kinda.
       * @param  {String}   model name
       * @return null
       */
      
      //- socket.get( "/"+model+"/find", 
      //-   {noun:"geolocation", sort:"date DESC", limit:50}, function(signals){
      //-   $.map(signals, function(signal){
      //-     var results = (typeof signal.geolocation != "undefined") ? signal.geolocation.length : 0;
      //-     if(results){
      //-       signalModel.emit('created', {
      //-         id:signal.id,
      //-         data:{date:signal.date, results:results, noun:signal.noun}
      //-       })
      //-     }
      //-   })
      //- })


      /**
       * Gets some amount of the signals from the model
       * for display now, and bsubscribe to them.
       * Intended to be customized, kinda.
       * @param  {String}   model name
       * @return null
       */
      
      //- socket.get( "/"+model+"/find", 
      //-   {noun:"image", sort:"date DESC", limit:50}, function(signals){
      //-   $.map(signals, function(signal){
      //-     signalModel.emit('created', {
      //-       id:signal.id,
      //-       data:{date:signal.date, results:10, noun:signal.noun}
      //-     })
      //-   })
      //- })



      /**
       * Gets some amount of the signals from the model
       * for display now, and bsubscribe to them.
       * Intended to be customized, kinda.
       * @param  {String}   model name
       * @return null
       */
      
      socket.get( "/"+model+"/find", 
        { }, function(signals){
        var nouns = {};
        var names = {};
        $.map(signals, function(signal){

            if(typeof nouns[signal.noun] != "undefined")
              nouns[signal.noun]++
            else
              nouns[signal.noun]=1
            
            if(typeof names[signal.name] != "undefined")
              names[signal.name]++
            else
              names[signal.name]=1

        })

        $.map(nouns, function(results, noun){
          signalModel.emit('nouns', {
            data:{ noun:noun, results:results }
          })
        })

        



      })



    }





      $('#nounsPieChart').highcharts({
          legend:{enabled:false},
          chart: {
              type: 'pie',
          },  
          credits: {
            enabled: false
          },
          title:{text:"nouns",
          align: 'center',
          verticalAlign: 'middle',
            y: 6
              },
          credits: {
              enabled: false
          },
          xAxis: {
            labels: {
                style: {
                    fontSize: '24px',
                }
            }
          },
          plotOptions: {
            series: {
                type: 'pie',
                name:"Cluster concepts",
               innerSize: '80%',
               marker: {
                enabled: false
              }
            }
          },
      });



    /**
     * Binds the DOM broadcast domain to the Model.
     * @param  {String} The name of the desired model
     */
    $(document).ready(function(){
      



      //- $('#geolocationChart').highcharts({
      //-     legend:{enabled:false},
      //-     chart: {
      //-         type: 'spline',
      //-         backgroundColor:"rgba(255,255,255,0)",
      //-     },
      //-     title:{text:"Geolocation requests over time"},

      //-     credits: {
      //-         enabled: false
      //-     },
      //-     xAxis: {
      //-       type: 'datetime',
      //-       title: {
      //-           text: 'Date'
      //-       }
      //-     },
      //-     plotOptions: {
      //-       series: {
      //-         marker: {
      //-           enabled: false
      //-         }
      //-       }
      //-     },
      //- });


      //- $('#imageChart').highcharts({
      //-     legend:{enabled:false},
      //-     chart: {
      //-         type: 'column',
      //-         backgroundColor:"rgba(0,0,0,0)",
      //-     },
      //-     title:{text:"Image Processing requests over time"},

      //-     credits: {
      //-         enabled: false
      //-     },
      //-     xAxis: {
      //-       type: 'datetime',

      //-       title: {
      //-           text: 'Date'
      //-       }
      //-     },
      //-     plotOptions: {
      //-       series: {
      //-         marker: {
      //-           enabled: false
      //-         }
      //-       }
      //-     },
      //- });



      dataset_glue("signal");




      //- $('#namesChart').highcharts({
      //-     legend:{enabled:false},
      //-     chart: {
      //-         type: 'bar',
      //-         backgroundColor:"rgba(0,0,0,0)",
      //-     },
      //-     title:{text:"Signal Names"},
      //-     credits: {
      //-         enabled: false
      //-     },
      //-     xAxis: {
      //-       type: 'category',
      //-       labels: {
      //-           rotation: 0,
      //-           style: {
      //-               fontSize: '11px',
      //-               fontFamily: 'Verdana, sans-serif'
      //-           }
      //-       }
      //-     },
      //-     plotOptions: {
      //-       series: {
      //-         marker: {
      //-           enabled: false
      //-         }
      //-       }
      //-     },
      //- });



    });


    })(window.io);





