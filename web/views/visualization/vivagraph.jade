extends index
block content
  #graphVisualization(style="width:100%;height:100%;")

  script(type="text/javascript" src="/js/vivagraph.js")

  script.
      (function (io) {

      var socket = io.connect();

      function forceGraph() {
         
          graph = Viva.Graph.graph();

          var graphics = Viva.Graph.View.svgGraphics(),
              nodeSize = 28;

          graphics.node(function(node) {

            nodeSize = node.size || nodeSize
            console.log(node.data || node.id)

            var ui      = Viva.Graph.svg('g'),
                title   =  ( node.data || node.id ),
                svgText = Viva.Graph.svg('text')
                  .attr('y', '-1px')
                  .text(title),

                img     = Viva.Graph.svg('image')
                           .attr('width', nodeSize)
                           .attr('height', nodeSize)
                           .link('/files/' + node.data);

            //- if(node.data) ui.append(svgText);
            if( node.data ) 
              if( node.data.split('.').pop() === "jpg"  ) 
                ui.append(img);
              else
                ui.append(svgText);

            return ui;
          }).placeNode(function(nodeUI, pos) {
              // 'g' element doesn't have convenient (x,y) attributes, instead
              // we have to deal with transforms: http://www.w3.org/TR/SVG/coords.html#SVGGlobalTransformAttribute
              nodeUI.attr('transform',
                          'translate(' +
                                (pos.x - nodeSize/2) + ',' + (pos.y - nodeSize/2) +
                          ')');
          });




          var layout = Viva.Graph.Layout.forceDirected(graph, {
              springLength : 18,
              springCoeff : 0.0001,
              dragCoeff : 0.06,
              gravity : -1.9
          });

          var renderer = Viva.Graph.View.renderer( graph, {
              graphics : graphics
            , container : document.getElementById('graphVisualization')

          });


          renderer.run();

          return graph
      }


      graph = forceGraph()



      $(document).ready(function(){


       /**
         * Listens for model changes over socket.
         * @param  {String} model   Model name
         * @return null
         */
      
        socket.on( "signal", function(dataset){
            signalModel.emit(dataset.verb, dataset);
        })

        /**
         * Gets some amount of the signals from the model
         * for display now, and bsubscribe to them.
         * Intended to be customized, kinda.
         * @param  {String}   model name
         * @return null
         */
        
        socket.get( "/signal/find", { type:"HEAD", limit:50 }, function(signals){

          $.map(signals, function(signal){

            graph.addNode( ""+signal.noun, ""+signal.noun)

            if(typeof signal.src != "undefined") 
              graph.addNode( signal.id, signal.src )
            graph.addNode( signal.id, "" )
            if( typeof signal.parent_id != "undefined" )
              var parent_id = signal.parent_id
            else
              var parent_id = "root";
              console.log(signal)
            graph.addLink( signal.id, parent_id  )
            graph.addLink( signal.id, signal.noun )
            

            socket.get( "/signal/find", { parent_id:signal.id, }, function(signals2){

              $.map(signals2, function(signal2){
                
                graph.addNode( ""+signal2.noun, ""+signal2.noun)
                
                if(typeof signal2.src != "undefined") 
                  graph.addNode( signal2.id, signal2.src )
                graph.addNode( signal2.id, "" )
                if( typeof signal2.parent_id != "undefined" )
                  var parent_id = signal2.parent_id
                else
                  var parent_id = "root";
                  console.log(signal2)
                graph.addLink( signal2.id, signal2.parent_id  )
                graph.addLink( signal2.id, signal2.noun )



                    socket.get( "/signal/find", { parent_id:signal2.id }, function(signals3){

                      $.map(signals3, function(signal3){
                        
                        graph.addNode( ""+signal3.noun, ""+signal3.noun)

                        if(typeof signal3.src != "undefined") 
                          graph.addNode( signal3.id, signal3.src )
                        graph.addNode( signal3.id, "" )
                        if( typeof signal3.parent_id != "undefined" )
                          var parent_id = signal3.parent_id
                        else
                          var parent_id = "root";
                        graph.addLink( signal3.id, ""+parent_id )
                        graph.addLink( signal3.id, ""+signal3.noun )




                          
                        
                      })

                    })





                
              })

            })


          })

        })


      })


      })(window.io);
