block content
   script(type="text/javascript" src="js/d3.js")
   link(href="styles/css/bootstrap.min.css" rel="stylesheet")
   #chart



   script.


      function Node(name, size, children ){
         this.name = name || "SIGNAL"
         children ? (this.children = children) : this.children = null
         this.size = size || 5
      }

      var data = 
      new Node( "zooid", 89, [

      new Node( "signal", 55, [ 
         new Node("image", 34, [ 
            new Node("outdoor", 21, [
               new Node("geo"), 
               new Node("xiff"), 
               new Node("landmark"), 
               new Node("vehicle"), 
            ]),
            new Node("indoor", 21, [
               new Node("xiff"), 
               new Node("text"), 
            ]),
            new Node("face", 21, [
               new Node("face"), 
               new Node("race"), 
               new Node("tattoo")
            ]), 
         ]),
         new Node("sound", 34, [
            new Node("music"), 
            new Node("transcription"), 
            new Node("voice id"), 
         ]), 
         new Node("video", 34, [
            new Node("frames"), 
            new Node("sound"), 
         ]), 
         ]),
         ]);





      console.log(data)

      var m = [10, 120, 10, 120],
          w = 1080 - m[1] - m[3],
          h = 450 - m[0] - m[2],
          i = 0,
          root;

      var tree = d3.layout.tree()
          .size([h, w]);

      var diagonal = d3.svg.diagonal().projection(function(d) { 
      var r = (d.y)  , a = (d.x) ;
        return [r , a];
      });

      var vis = d3.select("#chart").append("svg:svg")
          .attr("width", w + m[1] + m[3])
          .attr("height", h + m[0] + m[2])
        .append("svg:g")
          .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      d3.json("/signal", function(json) {
        console.log("CHARTING", json)
        root = data;
        root.x0 = h ;
        root.y0 = 0;

        function toggleAll(d) {
          if (d.children) {
            d.children.forEach(toggleAll);
            toggle(d);
          }
        }

        // Hide Everything
        // root.children.forEach(toggleAll);
        // toggle( root );
        update(root);
      });

      function update(source) {
        var duration = d3.event && d3.event.altKey ? 5000 : 700;

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse();

        // Normalize for fixed-depth.
        nodes.forEach(function(d) { d.y = d.depth * 110; });

        // Update the nodes…
        var node = vis.selectAll("g.node")
            .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter any new nodes at the parent's previous position.
        var nodeEnter = node.enter().append("svg:g")
            .attr("class", "node")
            .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
            .on("click", function(d) { toggle(d); update(d); });

        nodeEnter.append("svg:circle")
            .attr("r", 1e-3)
            .attr("r", 1e-3)
            .style("fill", function(d) { return d._children ? "#FFFFFF" : "#FFFFFF"; })

        nodeEnter.append("svg:text")
            .attr("x", function(d) { return d.children || d._children ? 0 : 10; })
            .attr("dy", ".35em")
            .attr("fill", function(d) { return d._children ? "#333339" : "#000000"; })
            .attr("text-anchor", function(d) { return d.children || d._children ? "middle" : "start"; })
            .text(function(d) { return d.name; })
            .style("fill-opacity", 1e-6);

        // Transition nodes to their new position.
        var nodeUpdate = node.transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

        nodeUpdate.select("circle")
            .attr("r", function(d){ return Math.round( d.size || 0 ) })
            .style("fill", function(d) { return d._children ? "#eeeeee" : "#ffffff"; })
            .style("stroke", function(d) { return d._children ? "#eeeeee" : "#eeeeee"; })
            .style("stroke-width", 3)

        nodeUpdate.select("text")
            .style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        var nodeExit = node.exit().transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
            .remove();

        nodeExit.select("circle")
            .attr("r", 1e-6);

        nodeExit.select("text")
            .style("fill-opacity", 1e-6);

        // Update the links…
        var link = vis.selectAll("path.link")
            .data(tree.links(nodes), function(d) { return d.target.id; });

        // Enter any new links at the parent's previous position.
        link.enter().insert("svg:path", "g")
            .attr("class", "link")
            .attr("d", function(d) {
              var o = {x: source.x0, y: source.y0};
              return diagonal({source: o, target: o});
            })
            .style("stroke", "#eeeeee")
            .style("stroke-width", 3)
          .transition()
            .duration(duration)
            .attr("d", diagonal);

        // Transition links to their new position.
        link.transition()
            .duration(duration)
            .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition()
            .duration(duration)
            .attr("d", function(d) {
              var o = {x: source.x, y: source.y};
              return diagonal({ source: o, target: o });
            })
            .remove();

        // Stash the old positions for transition.
        nodes.forEach(function(d) {
          d.x0 = d.x;
          d.y0 = d.y;
        });
      }

      // Toggle children.
      function toggle(d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
      }





